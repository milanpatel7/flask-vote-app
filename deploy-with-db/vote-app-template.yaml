apiVersion: template.openshift.io/v1
kind: Template
message: |-
  The following service(s) have been created in your project: 

         Username: ${MYSQL_USER}
         Password: ${MYSQL_PASSWORD}
    Database Name: ${MYSQL_DATABASE}

  For more information about using this template see: https://github.com/sjbylo/flask-vote-app
metadata:
  annotations:
    description: |-
      Sample web poll application written in Python (Flask).
    iconClass: icon-python
    openshift.io/display-name: Simple voting application for demos
    openshift.io/documentation-url: https://github.com/sjbylo/flask-vote-app
    openshift.io/long-description: |-
      This template provides a sample web poll application written in Python (Flask) which connects to a MySQL database.
      \n
      Users will be prompted with a poll question and related options. They can vote preferred option(s) and see poll results as a chart. Poll results are then loaded into an internal DB based on sqlite. As alternative, the application can store poll results in an external MySQL database.\n
      \n
      The repo has been modified to make it easy to build and run on OpenShift.\n
      \n
      The application has also been primed to be easily bound to RDS using the AWS's Service Catalog command line, svcat. Here is an example of that.\n
      \n
      This application is intended for demo use only.
    #openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://github.com/sjbylo/flask-vote-app
    #samples.operator.openshift.io/version: 4.6.4
    tags: database,mysql,python
  name: vote-app-template
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"db"}]'  # For topology view
    labels:
      app: vote-app
      app.kubernetes.io/component: vote-app
      app.kubernetes.io/instance: vote-app
      app.kubernetes.io/part-of: vote-app  # For topology view
      app.openshift.io/runtime: python
    name: vote-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: vote-app
    template:
      metadata:
        labels:
          deployment: vote-app
      spec:
        containers:
        - env:
          - name: ENDPOINT_ADDRESS
            value: db
          - name: PORT
            value: "3306"
          - name: DB_NAME
            value: ${MYSQL_DATABASE}
          - name: MASTER_USERNAME
            value: ${MYSQL_USER}
          - name: MASTER_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: DB_TYPE
            value: mysql
          image: quay.io/sjbylo/flask-vote-app:latest 
          name: vote-app
          ports:
          - containerPort: 8080
            protocol: TCP
        restartPolicy: Always
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: vote-app
      app.kubernetes.io/component: vote-app
      app.kubernetes.io/instance: vote-app
    name: vote-app
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deployment: vote-app
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: db
      app.kubernetes.io/component: db
      app.kubernetes.io/part-of: vote-app  # For topology view
      app.kubernetes.io/instance: db
      app.openshift.io/runtime: mysql
    name: db
  spec:
    replicas: 1
    selector:
      matchLabels:
        deployment: db
    template:
      metadata:
        labels:
          deployment: db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          image: registry.access.redhat.com/rhscl/mysql-57-rhel7:latest
          imagePullPolicy: IfNotPresent
          name: db
          ports:
          - containerPort: 3306
            protocol: TCP
        restartPolicy: Always
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: db
      app.kubernetes.io/component: db
      app.kubernetes.io/instance: db
    name: db
  spec:
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      deployment: db
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: vote-app
      app.kubernetes.io/component: vote-app
      app.kubernetes.io/instance: vote-app
    name: vote-app
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: vote-app
      weight: 100
parameters:
- description: Username for MySQL user that will be used for accessing the database.
  displayName: MySQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: Password for the MySQL connection user.
  displayName: MySQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Password for the MySQL root user.
  displayName: MySQL root user Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_ROOT_PASSWORD
  required: true
- description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  name: MYSQL_DATABASE
  required: true
  value: sampledb

